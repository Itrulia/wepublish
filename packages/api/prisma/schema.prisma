generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model MetadataProperty {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  key        String
  value      String
  public     Boolean

  ArticleRevision   ArticleRevision? @relation(fields: [articleRevisionId], references: [id], onDelete: Cascade)
  articleRevisionId Int?

  PageRevision   PageRevision? @relation(fields: [pageRevisionId], references: [id], onDelete: Cascade)
  pageRevisionId Int?

  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId Int?

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("properties")
}

model ArticleRevision {
  id                     Int                @id @default(autoincrement())
  preTitle               String?
  title                  String?
  lead                   String?
  seoTitle               String?
  slug                   String?
  tags                   String[]
  canonicalUrl           String?
  properties             MetadataProperty[]
  imageID                String?
  authorIDs              Int[]
  breaking               Boolean
  blocks                 Json[]
  hideAuthor             Boolean
  socialMediaTitle       String?
  socialMediaDescription String?
  socialMediaAuthorIDs   Int[]
  socialMediaImageID     String?

  revision    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  publishAt   DateTime?
  publishedAt DateTime?

  PublishedArticle Article[] @relation("publishedArticleRevision")
  PendingArticle   Article[] @relation("pendingArticleRevision")
  DraftArticle     Article[] @relation("draftArticleRevision")

  @@index([publishAt])
  @@index([publishedAt])
  @@index([updatedAt])
  @@index([tags])
  @@map("articles.revisions")
}

model Article {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  publishedId Int?             @unique
  published   ArticleRevision? @relation("publishedArticleRevision", fields: [publishedId], references: [id], onDelete: SetNull)

  pendingId Int?             @unique
  pending   ArticleRevision? @relation("pendingArticleRevision", fields: [pendingId], references: [id], onDelete: SetNull)

  draftId Int?             @unique
  draft   ArticleRevision? @relation("draftArticleRevision", fields: [draftId], references: [id], onDelete: SetNull)

  shared Boolean

  @@index([createdAt])
  @@index([modifiedAt])
  @@map("articles")
}

model AuthorsLinks {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  title String
  url   String

  Author   Author? @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int?

  @@map("authors.links")
}

model Author {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  modifiedAt DateTime       @updatedAt
  name       String
  slug       String         @unique
  jobTitle   String?
  links      AuthorsLinks[]
  bio        Json[]

  imageID String?
  image   Image?  @relation(fields: [imageID], references: [id])

  @@index([createdAt])
  @@index([modifiedAt])
  @@index([name])
  @@map("authors")
}

model Image {
  id          String   @id
  createdAt   DateTime @default(now())
  description String?
  extension   String
  fileSize    Int
  filename    String?
  focalPointX Float?
  focalPointY Float?
  format      String
  license     String?
  link        String
  mimeType    String
  modifiedAt  DateTime @updatedAt
  source      String?
  tags        String[]
  title       String?
  height      Int
  width       Int

  Author      Author[]
  MemberPlan  MemberPlan[]
  PeerProfile PeerProfile[]

  @@index([createdAt])
  @@index([modifiedAt])
  @@index([title])
  @@index([tags])
  @@map("images")
}

enum CommentItemType {
  article  @map("article")
  page     @map("page")
}

enum CommentRejectionReason {
  misconduct  @map("misconduct")
  spam        @map("spam")
}

model CommentsRevisions {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  text      Json

  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?

  @@index([createdAt])
  @@map("comments.revisions")
}

enum CommentState {
  approved            @map("approved")
  pendingApproval     @map("pendingApproval")
  pendingUserChanges  @map("pendingUserChanges")
  rejected            @map("rejected")
}

enum CommentAuthorType {
  team          @map("team")
  author        @map("author")
  verifiedUser  @map("author")
  guestUser     @map("guestUser")
}

model Comment {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  userID          Int?
  itemID          Int
  itemType        CommentItemType
  parentID        Int?
  revisions       CommentsRevisions[]
  rejectionReason CommentRejectionReason?
  state           CommentState
  authorType      CommentAuthorType
  guestUsername   String?

  user User? @relation(fields: [userID], references: [id])


  @@index([createdAt])
  @@map("comments")
}

model InvoiceItem {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name        String
  description String?
  quantity    Int
  amount      Int

  Invoice   Invoice? @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId Int?

  @@map("invoices.items")
}

model Invoice {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  mail                      String
  dueAt                     DateTime
  description               String?
  paidAt                    DateTime?
  canceledAt                DateTime?
  sentReminderAt            DateTime?
  items                     InvoiceItem[]
  manuallySetAsPaidByUserId Int?

  subscriptionID Int
  subscription   Subscription @relation(fields: [subscriptionID], references: [id])

  userID Int?
  user   User? @relation(fields: [userID], references: [id])

  SubscriptionPeriod SubscriptionPeriod[]

  @@index([mail])
  @@map("invoices")
}

enum MailLogState {
  submitted  @map("submitted")
  accepted   @map("accepted")
  delivered  @map("delivered")
  deferred   @map("deferred")
  bounced    @map("bounced")
  rejected   @map("rejecte")
}

model MailLog {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  recipient      String
  subject        String
  state          MailLogState
  mailData       String?
  mailProviderID String

  @@index([subject])
  @@map("mail.log")
}

enum PaymentPeriodicity {
  monthly    @map("monthly")
  quarterly  @map("quarterly")
  biannual   @map("biannual")
  yearly     @map("yearly")
}

model AvailablePaymentMethod {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  paymentMethodIDs     Int[]
  paymentPeriodicities PaymentPeriodicity[]
  forceAutoRenewal     Boolean

  MemberPlan   MemberPlan? @relation(fields: [memberPlanId], references: [id], onDelete: Cascade)
  memberPlanId Int?

  @@map("member.plans.payment-methods")
}

model MemberPlan {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name                    String
  slug                    String                   @unique
  tags                    String[]
  description             Json[]
  active                  Boolean
  amountPerMonthMin       Float
  availablePaymentMethods AvailablePaymentMethod[]

  imageID String?
  image   Image?  @relation(fields: [imageID], references: [id])

  Subscription Subscription[]

  @@index([name])
  @@map("member.plans")
}

model NavigationLink {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  label     String
  type      String
  url       String?
  pageID    Int?
  articleID Int?

  Navigation   Navigation? @relation(fields: [navigationId], references: [id], onDelete: Cascade)
  navigationId Int?

  @@map("navigations.links")
}

model Navigation {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  key   String           @unique
  links NavigationLink[]
  name  String

  @@index([createdAt])
  @@index([modifiedAt])
  @@index([name])
  @@map("navigations")
}

model PageRevision {
  id                     Int                @id @default(autoincrement())
  revision               Int
  createdAt              DateTime           @default(now())
  updatedAt              DateTime?          @updatedAt
  publishedAt            DateTime?
  publishAt              DateTime?
  slug                   String
  title                  String
  description            String?
  tags                   String[]
  properties             MetadataProperty[]
  imageID                String?
  socialMediaTitle       String?
  socialMediaDescription String?
  socialMediaImageID     String?
  blocks                 Json[]
  PublishedPage          Page[]             @relation("publishedPageRevision")
  PendingPage            Page[]             @relation("pendingPageRevision")
  DraftPage              Page[]             @relation("draftPageRevision")

  @@index([publishAt])
  @@index([publishedAt])
  @@index([updatedAt])
  @@index([tags])
  @@map("pages.revision")
}

model Page {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  publishedId Int?          @unique
  published   PageRevision? @relation("publishedPageRevision", fields: [publishedId], references: [id], onDelete: SetNull)

  pendingId Int?          @unique
  pending   PageRevision? @relation("pendingPageRevision", fields: [pendingId], references: [id], onDelete: SetNull)

  draftId Int?          @unique
  draft   PageRevision? @relation("draftPageRevision", fields: [draftId], references: [id], onDelete: SetNull)

  @@index([createdAt])
  @@index([modifiedAt])
  @@map("pages")
}

model PaymentMethod {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  modifiedAt        DateTime @updatedAt
  name              String
  slug              String
  description       String
  paymentProviderID String
  active            Boolean

  Subscription Subscription[]
  Payment      Payment[]

  @@map("payment.methods")
}

enum PaymentState {
  created             @map("created")
  submitted           @map("submitted")
  requiresUserAction  @map("requiresUserAction")
  processing          @map("processing")
  paid                @map("paid")
  canceled            @map("canceled")
  declined            @map("declined")
}

model Payment {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  modifiedAt   DateTime     @updatedAt
  invoiceID    Int
  state        PaymentState
  intentID     String?
  intentSecret String?
  intentData   String?
  paymentData  String?

  paymentMethodID Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodID], references: [id])

  @@index([intentID])
  @@map("payments")
}

model PeerProfile {
  id                   Int     @id @default(autoincrement())
  name                 String
  themeColor           String
  themeFontColor       String
  callToActionURL      String
  callToActionText     Json[]
  callToActionImageURL String?
  callToActionImageID  Int?

  logoID String?
  logo   Image?  @relation(fields: [logoID], references: [id])

  @@map("peerProfiles")
}

model Peer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name       String
  slug       String   @unique
  hostURL    String
  token      String
  isDisabled Boolean?

  @@map("peers")
}

model Token {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name    String @unique
  token   String
  roleIDs String[]

  @@map("tokens")
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  token     String   @unique

  userID Int
  user   User @relation(fields: [userID], references: [id])

  @@index([userID])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model SubscriptionPeriod {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  startsAt           DateTime
  endsAt             DateTime
  paymentPeriodicity PaymentPeriodicity
  amount             Float

  invoiceID Int?
  Invoice   Invoice? @relation(fields: [invoiceID], references: [id])

  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int?

  @@map("subscriptions.periods")
}

enum SubscriptionDeactivationReason {
  none                 @map("none")
  userSelfDeactivated  @map("userSelfDeactivated")
  invoiceNotPaid       @map("invoiceNotPaid")
}

model SubscriptionDeactivation {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  date   DateTime
  reason SubscriptionDeactivationReason

  subscriptionID Int          @unique
  subscription   Subscription @relation(fields: [subscriptionID], references: [id], onDelete: Cascade)

  @@map("subscriptions.deactivation-reasons")
}

model Subscription {
  id                 Int                       @id @default(autoincrement())
  createdAt          DateTime                  @default(now())
  modifiedAt         DateTime                  @updatedAt
  paymentPeriodicity PaymentPeriodicity
  monthlyAmount      Float
  autoRenew          Boolean
  startsAt           DateTime
  paidUntil          DateTime?
  periods            SubscriptionPeriod[]
  properties         MetadataProperty[]
  deactivation       SubscriptionDeactivation?

  paymentMethodID Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodID], references: [id])

  memberPlanID Int
  memberPlan   MemberPlan @relation(fields: [memberPlanID], references: [id])

  userID Int
  user   User @relation(fields: [userID], references: [id])

  Invoice Invoice[]

  @@map("subscriptions")
}

model UserAddress {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  company        String?
  streetAddress  String
  streetAddress2 String?
  zipCode        String
  city           String
  country        String

  userId Int?  @unique
  User   User? @relation(fields: [userId], references: [id])

  @@map("users.addresses")
}

model UserOAuth2Account {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String
  expiresAt         Int
  tokenType         String
  scope             String
  idToken           String
  oauthTokenSecret  String?
  oauthToken        String?
  sessionState      String?

  userId Int?
  User   User? @relation(fields: [userId], references: [id])

  @@map("users.oauth2-accounts")
}

model PaymentProviderCustomer {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  paymentProviderID String
  customerID        String

  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  @@map("users.payment-providers")
}

model User {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  modifiedAt      DateTime  @updatedAt
  email           String    @unique
  emailVerifiedAt DateTime?
  name            String
  firstName       String?
  preferredName   String?
  password        String
  active          Boolean
  lastLogin       DateTime?
  roleIDs         String[]

  address                  UserAddress?
  properties               MetadataProperty[]
  oauth2Accounts           UserOAuth2Account[]
  paymentProviderCustomers PaymentProviderCustomer[]

  Comment      Comment[]
  Session      Session[]
  Subscription Subscription[]
  Invoice      Invoice[]

  @@map("users")
}

model UserRole {
  id         String      @id
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  description   String?
  name          String  @unique
  permissionIDs Int[]
  systemRole    Boolean

  @@map("users.roles")
}
